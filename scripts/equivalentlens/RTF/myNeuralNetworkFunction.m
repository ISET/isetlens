function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 13-Sep-2021 16:58:30.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx3 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;-0.866020020534757;-0.86601329148834];
x1_step1.gain = [1;1.15470412722353;1.15470951052201];
x1_step1.ymin = -1;

% Layer 1
b1 = [-5.4227971117707109983;-5.3065814402808868522;3.9027937294685086655;1.8119483638189965991;4.9171212131874577622;-2.429339523171818005;1.4623785533453357299;2.0309849120606888739;-0.21153679054182869534;0.63440189732256735411;-0.93590592269194128328;-0.8033030872189070859;-1.0802674423606335452;1.9647030371009936989;-2.1294188554362762922;-1.955404630061921889;-2.3956540500004046557;-3.3343415430206513328;-1.8198561979575456071;-3.7649875927456197822];
IW1_1 = [0.43826190186031099838 0.80398009045468987743 -2.3460861730858679763;2.4868114788013673255 -1.5402516916626634025 1.0687716598941234825;-2.3571417851736731208 0.052911190739084026924 -2.1860102244360981594;-0.012450888605008640642 -1.6828494314431610146 -0.050276919087296895183;-1.0041609472793391333 3.4007753075772955142 6.369232013987152996;0.076444233914775394645 0.5838354149430871054 2.6605315282954777878;-3.1830069063861889944 -0.53135412867012254967 -2.5112992506188271946;-0.73698619078607086053 -0.68444008068822337343 4.5206602290335107242;1.9384204849959187911 -0.46459906721996974133 3.0594103089294604203;-2.6446768271992446842 -1.7428222027654458604 1.879339586959575259;0.29626296954331710065 -1.0103185158422380852 -1.7621407417383783134;-2.1505257056623388046 -0.96878478330544703923 -2.6673487181240873589;-0.32844081922937490292 -3.2550670617923302963 1.822594993942664221;3.7375158570095146082 0.50692873014813921717 1.2313637757596729294;-0.088975375901202552464 -2.3050175389680038762 1.183293796891274452;0.25599459418285003265 0.8948229518534384086 -2.208523430627156614;-0.18195126797938668273 -2.2046051090267702044 -1.5734434975158220205;-2.1868718012092136505 1.1548494657442538447 -0.40416005736984605967;-0.26316144690114762206 0.47663175752660286166 1.8774033536551408829;-2.3114601506961363064 1.9126134713614117988 2.7760122853550925903];

% Layer 2
b2 = -4.9079954842776443158;
LW2_1 = [3.9931185441145689019 4.4866952414185723441 -4.9747281036910235841 5.8785157661855276245 1.6070247733983828997 -0.84723529152664245334 0.023475138396981450745 -0.47325992069790590033 0.016726039799350809339 -0.0077073691092771979064 -1.6008151550699718513 0.0052435180643914591422 -0.20368862696204481644 0.006793811207626015633 -2.7952875726895176633 -4.4944404313742047918 -0.8517589296483973893 -0.067054175776640564943 -2.6065202253845907165 0.037003772175305670034];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.468154314140439;
y1_step1.xoffset = -1.2720956308437;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
