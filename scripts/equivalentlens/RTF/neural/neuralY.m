function [Y,Xf,Af] = neuralY(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 30-Jun-2021 20:33:52.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx3 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;-0.866024030365268;-0.864456828111472];
x1_step1.gain = [1;1.15470145399276;1.15685877099124];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.2930416734427572223;2.0070927039492314492;1.8465804870784259251;1.6693974690308333031;-1.7390383159211548758;0.039831615679511621353;-0.11707107405588366988;1.5391934360704164764;2.1777784233890509213;3.4744303335264552501];
IW1_1 = [-1.1847713219370252791 0.26097168059892233982 -1.6676072368338774599;-0.099471917857051977974 1.6042798900755717018 -1.1769260727118258103;-1.5577720021245131665 0.18263124043087397563 -1.7669393814604157367;-0.51669028352838919371 -0.40447009076046236409 1.580617450944374891;-0.34089819500673523844 0.9415665954635477064 2.8318705712086043036;0.038770607488999950241 -0.19501438117999372879 -0.067045656088245642046;-0.18334945721183204537 0.42257807128963148502 0.81822489243654583646;-0.44236180928155349745 -0.64390929606395186369 1.5753157431232522878;0.072171766183817501195 1.3263112979266693525 -1.2607385689684476038;-0.57904144643711996654 -2.3748244288488806752 -0.51542225544061659459];

% Layer 2
b2 = -1.0495509068520079143;
LW2_1 = [1.5292967348549406648 -1.7050444048358155413 -0.48369293365683219132 2.5276782454483504026 0.091699277205338089458 7.436189174353679654 3.0428760015631639568 -2.4999211787033521759 3.0835907514892277881 -1.5184047405157428123];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.175932385474705;
y1_step1.xoffset = -5.6900620770261;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
