function [Y,Xf,Af] = neuralDX(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 30-Jun-2021 20:37:34.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx3 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;-0.866024030365268;-0.864456828111472];
x1_step1.gain = [1;1.15470145399276;1.15685877099124];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.9134710977226552231;-3.6873142668918466036;0.58117217038607149604;0.17539461383805282635;-1.9202579794113097122;-0.2712828231388085265;-4.6382326217496085974;2.1830379842546765445;1.9411626856162194077;5.9070949300476067734];
IW1_1 = [-0.17783175670430553805 3.2769773535640687179 1.9578033155157983369;2.9689427112480419879 -4.4302175651190944805 1.7696514880238902734;0.21993544505637147024 -1.0816699510237126614 -1.4489830271716455101;-0.1636588392226339117 0.55029430197981432649 1.095554798929923912;0.53052815940652475746 4.4861059454280551861 -1.5185760645168999705;0.1808895621551771804 -0.72931096830268116182 -1.2128645766631902525;-0.12018071920938110109 -3.6943638225520176732 0.69529380971016896407;-0.30036816997906090609 4.4126098051447568693 2.8175674040560676481;0.40685976989888422706 1.9528569297492772705 -3.478574271312490751;-0.3162512925805976427 -5.9294005084139573825 2.0338947650021750313];

% Layer 2
b2 = 4.2201892606368573979;
LW2_1 = [0.26515638263805513253 -0.017980021874125725473 -1.858597771915192709 -14.865376425929769155 -0.062231872968746812513 -12.224925616401636219 13.194363348340598208 0.10850469146592013614 0.093943739120726274527 9.2684029776850085369];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1.00000354764303;
y1_step1.xoffset = -0.999995202066893;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
