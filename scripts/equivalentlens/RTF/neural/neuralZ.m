function [Y,Xf,Af] = neuralZ(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 30-Jun-2021 20:34:36.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx3 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;-0.866024030365268;-0.864456828111472];
x1_step1.gain = [1;1.15470145399276;1.15685877099124];
x1_step1.ymin = -1;

% Layer 1
b1 = [4.6745201605272201917;1.7201246310503304215;-1.7269467045711215381;1.7939556247556072144;1.7760869128820098162;0.8712399714430270059;-0.93390533886934734564;1.3589354374851658758;-1.9640875017473018449;-2.5836303954691648421];
IW1_1 = [0.048147868201022410439 0.026361843398609721006 1.7438880049167939656;0.052082782306800037841 -1.6498965533713609855 -0.49534393978562513139;-0.041939990184529853112 -1.6960944066221708137 0.40821832581856998257;-0.14933072986355647171 -0.92101308044413821019 1.3820017580621171138;-0.20917831712477669148 1.1274429691145051446 1.8064168560291216092;-2.7828291408744956215 -0.5642903582872810242 0.1945130662718072001;-2.3941447274981335624 -0.0047566608913796899066 -2.5470542609772124365;0.59387944696312877646 0.32744198863343892958 -3.5674380437440476044;0.42904500508679876969 -2.1599220746509004698 -3.4468329671089881217;-0.33708259519375655122 -0.15222012846849794498 3.3070224816215465502];

% Layer 2
b2 = -11.675099321359057924;
LW2_1 = [-9.1616106231165161944 4.7594812808084707711 -4.5957146596724589571 6.4592437023945210584 5.9478461025136208917 0.0026434439083639822178 0.013271278528897914248 0.26464945206238804642 0.63469106306908718018 -1.6588042852500595181];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.470714158418978;
y1_step1.xoffset = -1.24886306100829;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
