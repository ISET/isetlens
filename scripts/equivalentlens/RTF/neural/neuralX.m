function [Y,Xf,Af] = neuralX(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 30-Jun-2021 20:30:23.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx3 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;-0.866024030365268;-0.864456828111472];
x1_step1.gain = [1;1.15470145399276;1.15685877099124];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.0083117653807587288;-4.2576123219386303731;3.7655237336725893016;-3.8100895618444621249;-3.9938906584967939217;-0.064251975284758081064;-1.3096201351707252858;-0.11807713876867328984;-1.1645278286368776488;-3.5582781763378035222];
IW1_1 = [0.44272035012565735812 4.8072782600230796746 -2.3819502951806170721;0.30873645855978809616 4.8304471469322773913 4.8013275822598888709;-0.50441532708634462256 -2.2368262317467992872 1.2938375682703679992;0.55942659422682250447 -1.9821805396011702438 -0.88344699900310286189;0.028829117886927768666 -4.9286476263565157652 3.3125540835573903387;-0.11459531095457242689 1.4984398252368900106 0.76782992566753749397;-0.15598713601709923715 2.4187266381225254186 1.0580007191745535167;-0.094157961975874476801 -1.0464602919701333494 0.6324576869744565899;0.13802772258504558689 -3.3235972341555117815 -1.3497655342053764826;-1.834361578039815921 4.0808756885380663704 -6.2687988790097124436];

% Layer 2
b2 = -0.14320237373438829409;
LW2_1 = [-0.05709958265710704528 -0.02424199203368767111 -3.5542801583766010509 -3.6731870198759550838 0.046518127846233707501 0.57697842638021312744 0.11609602134744326229 -0.78410851596133690489 -0.043961401035788411074 0.001537661553373708247];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.174972469344738;
y1_step1.xoffset = -5.71428088486416;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
