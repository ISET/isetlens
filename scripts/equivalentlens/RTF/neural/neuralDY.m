function [Y,Xf,Af] = neuralDY(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 30-Jun-2021 20:40:49.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx3 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;-0.866024030365268;-0.864456828111472];
x1_step1.gain = [1;1.15470145399276;1.15685877099124];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.55856927032941050548;-1.3368313240523224117;-4.196792713263153729;3.0877808457658733055;0.13150799784930439218;0.19938306666931907007;1.1427716722867384824;-1.1879528007408668433;-3.297832275840696159;1.6730436514567585959];
IW1_1 = [0.3618173849172284795 0.44534588506129008101 2.0753883797065451056;0.089191199912939361782 -0.54226503242392443127 -0.85275595795075076477;0.42916873561033158646 2.7197470225976765335 -3.8360261373560131659;0.34155703220754612959 0.54048687807284234719 -5.127881231344391999;0.048721804880155261674 0.64850806080005485299 -0.57049557693688002225;0.108367789516566837 0.6949567512080840892 -0.98583890907314042362;-0.15945902632013045364 -0.050372177042691472504 1.6080311425298630112;0.088140246359348556338 -1.0112642112245793236 -0.99949551034619865675;-0.28942433892876839874 0.7963620839502371096 1.6731463680060099097;0.24117383489637056471 1.6218546503175657048 -2.1712747105333356501];

% Layer 2
b2 = 9.6781765256328000646;
LW2_1 = [0.14578166670610059885 49.084600312921750742 4.3595990269581665899 -0.17043512644504116293 19.425589443549313273 -14.455669445043689336 8.7343419896042284734 -13.065782206656889386 -20.77678981002206271 -1.1114510533909143231];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1.00132848569137;
y1_step1.xoffset = -0.999350953635389;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
