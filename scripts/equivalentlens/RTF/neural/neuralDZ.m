function [Y,Xf,Af] = neuralDZ(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 30-Jun-2021 20:43:07.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx3 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;-0.866024030365268;-0.864456828111472];
x1_step1.gain = [1;1.15470145399276;1.15685877099124];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.408109074995582688;-4.6481783075923193138;3.564296243163231015;-11.760114923193821568;-1.2775574917095140481;1.3739232013460860315;1.0572387207462425884;4.0883177839700977074;-4.6355597398930523667;4.2877541555401910145];
IW1_1 = [0.14214442600774376824 -0.062358693295550597646 -1.3826732834340678124;0.2025347294344588267 3.7454447379304505183 -2.3072430594327406617;0.24657893197709171429 -0.11774486362547392782 -1.8376278710025171215;0.92265487323145056742 0.059427517509245603167 0.88890576258943132526;-0.076900816810946334701 4.8934104570694536562 -0.42658534544374221431;0.20314718176387758231 5.0771474146239565783 -0.12690964365252996315;-0.11695231373315964629 0.083685821587066624994 2.3396514386705140609;0.1128485497141879651 3.156391834418207587 -1.3467345900275311532;0.16697474707202378252 -3.918733773514403218 -1.9689337394644956802;0.071553391534994306711 -3.4371946083162594476 -1.0539700324902718798];

% Layer 2
b2 = -138.00348474879697847;
LW2_1 = [-65.692334201697633489 -34.061117317888573552 85.939628524525318198 134.76993188305127092 -0.16674645782681804529 0.1437568627163997026 -1.6275084015921339464 26.429180191747096984 -31.315650293115432135 32.487244874487409163];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1.51279932616289;
y1_step1.xoffset = -0.322052413305117;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
