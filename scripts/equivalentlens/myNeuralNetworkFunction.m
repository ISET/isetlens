
function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 26-Apr-2021 14:24:52.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx5 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;-0.484194980263903;-0.499623976252115;0.866025403784439];
x1_step1.gain = [1.33333333333333;2.03211765971791;2.0236956437803;14.9282032302755];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.93539530212156074551;2.8923704558881149218;-1.2524055003259864094;0.0042936749439093117517;-0.88269763378982823987;0.54098517999915274324;-1.0171103653110520337;-0.021224925462100845824;-0.94262307052953475672;-0.91984253981755736973];
IW1_1 = [0.12502909331689363026 -0.010898240627454175433 0.26498644152941036589 -0.011447319634433060845;-0.53447069463421426061 -0.01356358576595067221 0.56045787502119459589 0.10784227090118889136;0.22226825323291149461 -0.11540486963615097238 -0.02524075360551726252 -0.034784456504215112427;0.0034569426792162658707 0.098222802746195589374 0.075472552621706823217 -0.008786795321068944023;0.26805207031855005084 -0.01773169703427468491 0.041594059265811861303 -0.03652161786843155511;0.087951537029122603406 -0.010534037960234740247 0.33305099066618248926 -0.010971433836468289652;-0.32757105249507978417 -0.0057667324278064223397 0.14230331318590491718 -0.0018353082006452973735;0.0070216006719177517098 -0.10416782705234661766 0.08626767364665662019 -0.008890733216065411712;-0.28933543196846966961 -0.20199228626248660889 0.044571813601716761544 0.003090367869695017939;-0.260427788707522756 -0.080193856669847241037 0.04515004073348836966 0.0032698040862080171402];

% Layer 2
b2 = [-14.785511388489926077;-3.3473342553800859989;0.77292232893263312921;1.0285908997970303336;-2.6947513737124868527];
LW2_1 = [-9.0697050011562101446 -1.9203399611674241143 -24.551331572231365641 4.8185309419729218661 14.572903538818531288 -1.3161480333734199011 -0.23520701903384244602 7.4244739416648783958 -6.1110131916232131033 5.9171016733769228324;3.5638987519159535111 2.5671948523365184514 -1.120059658685489179 -4.7238579494350503296 1.5416727795170859228 1.6737248196911138631 3.3879653246699401592 -3.9642527486335858988 3.8473147648884551408 -11.230316121180896616;0.70957333894105456551 0.074834057296911504764 1.3752822585293704716 4.8544651654856760814 -0.84956711956331754099 0.2160896460246188866 0.059151168002494730613 -5.6114585664646767782 0.33179810773011675362 -0.3840631963524698822;2.5438699313752515252 0.2881970859819072972 0.49636673888670129751 0.66644064087974874688 -2.1428525922729368958 1.6356138409240577047 -0.46764792798456722434 0.26185803268137264332 -1.3112553016489223445 3.6452163551794849461;14.542605221445723984 13.058980004202533465 1.421379629139109424 -18.820850716988797302 -4.0459706820583711817 7.8611421417287621338 -10.229507196504371791 -20.587131733836766756 -9.1210169769249631599 26.813859694929423227];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [3.38730517873557;1.13155274248;2.11620729249427;1.62413235573364;5.66750191663129];
y1_step1.xoffset = [-0.293249571618486;-0.225966954961905;-0.46495500399742;-0.762177477062301;0.647110838351726];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
